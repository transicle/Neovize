/*

	      Neovize ~ A JavaScript Neovim configuration handler
	~ Support us on GitHub @ https://github.com/transicle/Neovize ~

*/

import { fetchContent, fileExists, path, write } from "../fileManager.js";
import { init, overrideAutoCommand, saveOldConfig } from "../Vim.js";
import { Dashboard } from "./Dashboard.js";

export class Builder {
	fetchSavedConfig(
		config: string = "editingConfig"
	): Object {
		const name = !config.includes(".json") ? `${config}.json` : config;

		if (!fileExists(path(["configs", name]))) write("{ }", ["configs", name]);
		return JSON.parse(fetchContent(["configs", name]));
	}

	updateConfig(
		data: [string, any], // [Name, Data: <any>]
		config: string = "editingConfig"
	) {
		const name = !config.includes(".json") ? `${config}.json` : config;
		const cached = Object.assign(this.fetchSavedConfig(), {
			[data[0]]: data[1]
		});

		write(JSON.stringify(cached, null, 2), ["configs", name])
	}

	buildConfig(
		data: Object
	) {
		if (Object.keys(data).length === 0) {
			console.log("[!] Your config cannot be empty. ~");
			console.log("[!] Add at least one thing before pushing changes.\n");
		} else {
			saveOldConfig();
			console.log("[/] Building new Neovize configuration ...");

			const supportedKeys = [
				"launchermessage"
			]

			for (const [key, value] of Object.entries(data)) {
				if (supportedKeys.includes(key.toLowerCase())) {
					console.log(`[/] Updating "${key}" ...`);
					switch (key.toLowerCase()) {
						case "launchermessage":
							this.updateNeovimOutput(overrideAutoCommand("\"VimEnter\"", `print(\"${value}\")`));
							console.log(`[!] Set "${key}" key to "${value}".`);
							break;
						case "dashboardmessage":
							break;
					}
				}
			}

			console.log("[~] Neovize configuration built. :)");
		}
	}

	private updateNeovimOutput(
		content: string
	) {
		let currentSource = `-- This Neovim configuration was auto-generated. --\n--[[\n\n	Generated by: https://github.com/transicle/Neovize\n	Generated in: Lua\n\n]]--\n\n`;
		const commentRegex = /^-- This Neovim configuration was auto-generated\. --\n--\[\[[\s\S]*?\]\]--\n*/m;
		const strippedContent = content.replace(commentRegex, "");

		currentSource = currentSource + strippedContent;

		write(currentSource, init, true);
	}

	// Bigger configurations

	DashboardController = Dashboard;

	// Small configurations, no extra classes needed.
	/**
	 * 
	 * Changes the message you see in the commandline when you first launch Neovim.
	 * 
	 * @warning This does **not** change the main default message! Use **changeDashboardMessage** for that.
	 */
	changeLauncherMessage(
		content: string
	) {
		this.updateConfig(["launcherMessage", content]);
	}
}
