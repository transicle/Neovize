/*

		  Neovize ~ A JavaScript Neovim configuration handler
	~ Support us on GitHub @ https://github.com/transicle/Neovize ~

*/

import { fetchContent, fileExists, newFolder, path, write } from "../fileManager.js";
import type { Config } from "../types.js";
import { merge } from "../utility.js";
import { importAlpha } from "../Vim/Alpha.nvim.js";
import { init, overrideAutoCommand, overridePackage, saveOldConfig } from "../Vim/Vim.js";
import { Dashboard } from "./Dashboard.js";

export function fetchSavedConfig(
	config: string = "editingConfig"
): Config {
	if (!fileExists(path(["configs"]))) newFolder(["configs"]);
	const name = !config.includes(".json") ? `${config}.json` : config;

	if (!fileExists(path(["configs", name])) || fetchContent(["configs", name]).trim() === "") write("{ }", ["configs", name]);
	return JSON.parse(fetchContent(["configs", name])) as Config;
}

export function updateConfig<K extends keyof Config>(
	data: [K, any],
	config: string = "editingConfig"
) {
	const name = !config.includes(".json") ? `${config}.json` : config;
	const cached: Config = fetchSavedConfig();

	merge(cached, { [data[0]]: data[1] });
	write(JSON.stringify(cached, null, 2), ["configs", name]);
}

export class Builder {
	buildConfig(
		data: Object
	) {
		if (Object.keys(data).length === 0) {
			console.log("[!] Your config cannot be empty. ~");
			console.log("[!] Add at least one thing before pushing changes.\n");
		} else {
			saveOldConfig();
			console.log("[/] Building new Neovize configuration ...");

			const supportedKeys = [
				"launchermessage", "dashboard"
			]

			for (const [key, value] of Object.entries(data)) {
				if (supportedKeys.includes(key.toLowerCase())) {
					console.log(`[/] Updating "${key}" ...`);
					switch (key.toLowerCase()) {
						case "launchermessage":
							this.updateNeovimOutput(overrideAutoCommand("\"VimEnter\"", `print(\"${value}\")`));
							console.log(`[!] Set "${key}" key to "${value}".`);
							break;
						case "dashboard":
							this.updateNeovimOutput(overridePackage(importAlpha(), "alpha"));
							console.log(`[!] Applied all changes to the dashboard.`);
							break;
					}
				}
			}

			console.log("[~] Neovize configuration built. :)");
		}
	}

	private updateNeovimOutput(
		content: string
	) {
		let currentSource = `\n\n-- This Neovim configuration was auto-generated. --\n--[[\n\n    Generated by: https://github.com/transicle/Neovize\n    Generated in: Lua\n\n]]--\n\n`;
		const commentRegex = /^-- This Neovim configuration was auto-generated\. --\n--\[\[[\s\S]*?\]\]--\n*/m;
		const packageInstaller = `do\n    -- Required dependencies and packages --\n\n    local alpha = vim.fn.stdpath("config") .. "/pack/alpha/start/alpha-nvim"\n    if vim.fn.empty(vim.fn.glob(alpha)) > 0 then\n        vim.fn.system({\n            "git", "clone", "--depth=1",\n            "https://github.com/goolord/alpha-nvim", alpha\n        })\n\n        vim.cmd("packadd alpha-nvim")\n    end\n\n    vim.opt.rtp:prepend(alpha)\nend\n\n`;
		let strippedContent = content.replace(commentRegex, "");

		strippedContent = strippedContent.replace(/do[\s\S]*?^end$/gm, "").trim();
		currentSource = currentSource + packageInstaller + strippedContent;

		write(currentSource.trim(), init, true);
	}

	// Bigger configurations

	DashboardController = Dashboard;

	// Small configurations, no extra classes needed.
	/**
	 * 
	 * Changes the message you see in the commandline when you first launch Neovim.
	 * 
	 * @warning This does **not** change the main default message! Use the **`DashboardController`** class for that.
	 */
	changeLauncherMessage(
		content: string
	) {
		updateConfig(["launcherMessage", content]);
	}
}
